<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 900">
    <!-- 背景 -->
    <rect width="800" height="900" fill="#f5f5f5"/>
    
    <!-- タイトル -->
    <rect x="50" y="20" width="700" height="50" rx="4" fill="#6A1B9A"/>
    <text x="400" y="50" text-anchor="middle" fill="white" font-size="20">コントローラーの応用パターン</text>
    
    <!-- デコレータパターン -->
    <rect x="60" y="90" width="680" height="240" rx="4" fill="#9C27B0"/>
    <text x="400" y="115" text-anchor="middle" fill="white" font-size="16">デコレータ活用パターン</text>
    
    <!-- デコレータの例 -->
    <rect x="70" y="130" width="320" height="190" rx="2" fill="white"/>
    <text x="80" y="150" fill="#212121" font-size="14">目的：宣言的なルート・パラメータ制御</text>
    <text x="80" y="175" fill="#212121" font-size="12">実装例:</text>
    <text x="90" y="195" fill="#212121" font-size="11" font-family="monospace">@Controller('api/v1/users')</text>
    <text x="90" y="215" fill="#212121" font-size="11" font-family="monospace">@UseGuards(AuthGuard)</text>
    <text x="90" y="235" fill="#212121" font-size="11" font-family="monospace">@UsePipes(ValidationPipe)</text>
    <text x="90" y="255" fill="#212121" font-size="11" font-family="monospace">@UseInterceptors(LoggingInterceptor)</text>
    <text x="90" y="275" fill="#212121" font-size="11" font-family="monospace">@UseFilters(HttpExceptionFilter)</text>
    
    <rect x="410" y="130" width="320" height="190" rx="2" fill="white"/>
    <text x="420" y="150" fill="#212121" font-size="12">責務：</text>
    <text x="430" y="170" fill="#212121" font-size="11">・メタデータの付与</text>
    <text x="430" y="190" fill="#212121" font-size="11">・ミドルウェアの適用</text>
    <text x="430" y="210" fill="#212121" font-size="11">・バリデーションの制御</text>
    <text x="430" y="230" fill="#212121" font-size="11">・認証/認可の制御</text>
    <text x="430" y="250" fill="#212121" font-size="11">・例外処理の設定</text>
    <text x="430" y="270" fill="#212121" font-size="11">・ログ/監視の設定</text>
    
    <!-- バリデーションパターン -->
    <rect x="60" y="350" width="680" height="240" rx="4" fill="#009688"/>
    <text x="400" y="375" text-anchor="middle" fill="white" font-size="16">バリデーションパターン</text>
    
    <rect x="70" y="390" width="320" height="190" rx="2" fill="white"/>
    <text x="80" y="410" fill="#212121" font-size="14">目的：入力データの検証と型安全性確保</text>
    <text x="80" y="435" fill="#212121" font-size="12">実装例:</text>
    <text x="90" y="455" fill="#212121" font-size="11" font-family="monospace">class CreateUserDto {</text>
    <text x="90" y="475" fill="#212121" font-size="11" font-family="monospace">  @IsString()</text>
    <text x="90" y="495" fill="#212121" font-size="11" font-family="monospace">  @MinLength(3)</text>
    <text x="90" y="515" fill="#212121" font-size="11" font-family="monospace">  username: string;</text>
    <text x="90" y="535" fill="#212121" font-size="11" font-family="monospace">}</text>
    
    <rect x="410" y="390" width="320" height="190" rx="2" fill="white"/>
    <text x="420" y="410" fill="#212121" font-size="12">責務：</text>
    <text x="430" y="430" fill="#212121" font-size="11">・入力データの検証</text>
    <text x="430" y="450" fill="#212121" font-size="11">・型変換の自動化</text>
    <text x="430" y="470" fill="#212121" font-size="11">・バリデーションルールの定義</text>
    <text x="430" y="490" fill="#212121" font-size="11">・エラーメッセージの生成</text>
    <text x="430" y="510" fill="#212121" font-size="11">・カスタムバリデーションの適用</text>
    
    <!-- レスポンスパターン -->
    <rect x="60" y="610" width="680" height="240" rx="4" fill="#FF5722"/>
    <text x="400" y="635" text-anchor="middle" fill="white" font-size="16">レスポンスパターン</text>
    
    <rect x="70" y="650" width="320" height="190" rx="2" fill="white"/>
    <text x="80" y="670" fill="#212121" font-size="14">目的：統一的なレスポンス形式の提供</text>
    <text x="80" y="695" fill="#212121" font-size="12">実装例:</text>
    <text x="90" y="715" fill="#212121" font-size="11" font-family="monospace">@Get(':id')</text>
    <text x="90" y="735" fill="#212121" font-size="11" font-family="monospace">async findOne(@Param('id') id: string) {</text>
    <text x="90" y="755" fill="#212121" font-size="11" font-family="monospace">  return {</text>
    <text x="90" y="775" fill="#212121" font-size="11" font-family="monospace">    status: 'success',</text>
    <text x="90" y="795" fill="#212121" font-size="11" font-family="monospace">    data: await this.service.findOne(id)</text>
    <text x="90" y="815" fill="#212121" font-size="11" font-family="monospace">  };</text>
    <text x="90" y="835" fill="#212121" font-size="11" font-family="monospace">}</text>
    
    <rect x="410" y="650" width="320" height="190" rx="2" fill="white"/>
    <text x="420" y="670" fill="#212121" font-size="12">責務：</text>
    <text x="430" y="690" fill="#212121" font-size="11">・レスポンス形式の標準化</text>
    <text x="430" y="710" fill="#212121" font-size="11">・エラーハンドリングの統一</text>
    <text x="430" y="730" fill="#212121" font-size="11">・ステータスコードの適切な設定</text>
    <text x="430" y="750" fill="#212121" font-size="11">・レスポンス変換の自動化</text>
    <text x="430" y="770" fill="#212121" font-size="11">・データのシリアライズ</text>
    <text x="430" y="790" fill="#212121" font-size="11">・セキュリティヘッダーの付与</text>
</svg>
