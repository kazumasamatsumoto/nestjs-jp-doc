<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 1000">
    <!-- 背景 -->
    <rect width="800" height="1000" fill="#f5f5f5"/>
    
    <!-- リソース定義 -->
    <rect x="50" y="20" width="700" height="220" rx="4" fill="#3F51B5"/>
    <text x="400" y="45" text-anchor="middle" fill="white" font-size="16">リソース (Resource)</text>
    
    <rect x="60" y="60" width="330" height="170" rx="2" fill="white"/>
    <text x="75" y="80" fill="#212121" font-size="14">目的：RESTful APIのエンドポイント定義</text>
    <text x="75" y="105" fill="#212121" font-size="12">標準CRUD操作：</text>
    <text x="85" y="125" fill="#212121" font-size="11">・GET /resource - 一覧取得</text>
    <text x="85" y="145" fill="#212121" font-size="11">・GET /resource/:id - 個別取得</text>
    <text x="85" y="165" fill="#212121" font-size="11">・POST /resource - 作成</text>
    <text x="85" y="185" fill="#212121" font-size="11">・PUT /resource/:id - 更新</text>
    <text x="85" y="205" fill="#212121" font-size="11">・DELETE /resource/:id - 削除</text>
    
    <rect x="410" y="60" width="330" height="170" rx="2" fill="white"/>
    <text x="425" y="80" fill="#212121" font-size="12">責務：</text>
    <text x="435" y="100" fill="#212121" font-size="11">・リソースの一貫した操作提供</text>
    <text x="435" y="120" fill="#212121" font-size="11">・HTTPメソッドの適切な利用</text>
    <text x="435" y="140" fill="#212121" font-size="11">・URI設計の一貫性維持</text>
    <text x="435" y="160" fill="#212121" font-size="11">・ステータスコードの適切な使用</text>
    <text x="435" y="180" fill="#212121" font-size="11">・リソース間の関係性の表現</text>
    
    <!-- 初期設定とセットアップ -->
    <rect x="50" y="260" width="700" height="220" rx="4" fill="#00796B"/>
    <text x="400" y="285" text-anchor="middle" fill="white" font-size="16">始めるために (Getting Started)</text>
    
    <rect x="60" y="300" width="330" height="170" rx="2" fill="white"/>
    <text x="75" y="320" fill="#212121" font-size="14">セットアップ手順：</text>
    <text x="85" y="345" fill="#212121" font-size="11" font-family="monospace">1. npm i -g @nestjs/cli</text>
    <text x="85" y="365" fill="#212121" font-size="11" font-family="monospace">2. nest new project-name</text>
    <text x="85" y="385" fill="#212121" font-size="11" font-family="monospace">3. cd project-name</text>
    <text x="85" y="405" fill="#212121" font-size="11" font-family="monospace">4. nest g controller resource-name</text>
    <text x="85" y="425" fill="#212121" font-size="11">5. モジュールへの登録</text>
    <text x="85" y="445" fill="#212121" font-size="11">6. 依存関係の注入設定</text>
    
    <rect x="410" y="300" width="330" height="170" rx="2" fill="white"/>
    <text x="425" y="320" fill="#212121" font-size="12">プロジェクト構造：</text>
    <text x="435" y="340" fill="#212121" font-size="11">src/</text>
    <text x="445" y="360" fill="#212121" font-size="11">├── controllers/</text>
    <text x="445" y="380" fill="#212121" font-size="11">├── services/</text>
    <text x="445" y="400" fill="#212121" font-size="11">├── modules/</text>
    <text x="445" y="420" fill="#212121" font-size="11">└── main.ts</text>
    
    <!-- ライブラリ固有アプローチ -->
    <rect x="50" y="500" width="700" height="480" rx="4" fill="#C2185B"/>
    <text x="400" y="525" text-anchor="middle" fill="white" font-size="16">ライブラリ固有のアプローチ</text>
    
    <rect x="60" y="540" width="330" height="200" rx="2" fill="white"/>
    <text x="75" y="560" fill="#212121" font-size="14">Express固有の実装</text>
    <text x="85" y="585" fill="#212121" font-size="11" font-family="monospace">@Get()</text>
    <text x="85" y="605" fill="#212121" font-size="11" font-family="monospace">findAll(@Res() response) {</text>
    <text x="85" y="625" fill="#212121" font-size="11" font-family="monospace">  response</text>
    <text x="85" y="645" fill="#212121" font-size="11" font-family="monospace">    .status(200)</text>
    <text x="85" y="665" fill="#212121" font-size="11" font-family="monospace">    .json([/* data */]);</text>
    <text x="85" y="685" fill="#212121" font-size="11" font-family="monospace">}</text>
    
    <rect x="410" y="540" width="330" height="200" rx="2" fill="white"/>
    <text x="425" y="560" fill="#212121" font-size="14">Fastify固有の実装</text>
    <text x="435" y="585" fill="#212121" font-size="11" font-family="monospace">@Get()</text>
    <text x="435" y="605" fill="#212121" font-size="11" font-family="monospace">findAll(@Res() reply) {</text>
    <text x="435" y="625" fill="#212121" font-size="11" font-family="monospace">  reply</text>
    <text x="435" y="645" fill="#212121" font-size="11" font-family="monospace">    .code(200)</text>
    <text x="435" y="665" fill="#212121" font-size="11" font-family="monospace">    .send([/* data */]);</text>
    <text x="435" y="685" fill="#212121" font-size="11" font-family="monospace">}</text>
    
    <rect x="60" y="760" width="680" height="200" rx="2" fill="white"/>
    <text x="75" y="780" fill="#212121" font-size="14">ライブラリ固有アプローチの特徴</text>
    <text x="85" y="805" fill="#212121" font-size="12">メリット：</text>
    <text x="95" y="825" fill="#212121" font-size="11">・完全な制御が可能</text>
    <text x="95" y="845" fill="#212121" font-size="11">・ライブラリ固有の機能を活用可能</text>
    <text x="95" y="865" fill="#212121" font-size="11">・より細かな応答制御が可能</text>
    
    <text x="385" y="805" fill="#212121" font-size="12">デメリット：</text>
    <text x="395" y="825" fill="#212121" font-size="11">・プラットフォーム依存度が高まる</text>
    <text x="395" y="845" fill="#212121" font-size="11">・テストが複雑化</text>
    <text x="395" y="865" fill="#212121" font-size="11">・Nestの標準機能が使えない場合がある</text>
</svg>
